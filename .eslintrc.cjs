/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
  'env': {
    'browser': true,
    'node': true,
    'es2022': true
  },
  'parser': '@typescript-eslint/parser',
  'plugins': ['@typescript-eslint'],
  'extends': ['plugin:sonarjs/recommended'],
  'root': true,
  'rules': {
    '@typescript-eslint/consistent-type-definitions': 'warn',
    '@typescript-eslint/dot-notation': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/explicit-member-accessibility': 'off',
    '@typescript-eslint/explicit-module-boundary-types': [
      'warn',
      {
        'allowArgumentsExplicitlyTypedAsAny': true,
        'allowHigherOrderFunctions': true
      }
    ],
    '@typescript-eslint/member-delimiter-style': [
      'warn',
      {
        'multiline': {
          'delimiter': 'semi',
          'requireLast': true
        },
        'singleline': {
          'delimiter': 'semi',
          'requireLast': false
        }
      }
    ],
    '@typescript-eslint/member-ordering': 'warn',
    '@typescript-eslint/no-empty-interface': 'warn',
    '@typescript-eslint/no-inferrable-types': [
      'warn',
      {
        'ignoreParameters': true
      }
    ],
    '@typescript-eslint/no-misused-new': 'warn',
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/no-shadow': [
      'warn',
      {
        'hoist': 'all'
      }
    ],
    '@typescript-eslint/prefer-for-of': 'warn',
    '@typescript-eslint/prefer-function-type': 'warn',
    '@typescript-eslint/type-annotation-spacing': 'warn',
    '@typescript-eslint/typedef': [
      'warn',
      {
        'parameter': true,
        'propertyDeclaration': true
      }
    ],
    '@typescript-eslint/unified-signatures': 'warn',
    'arrow-body-style': ['error', 'as-needed'],
    'brace-style': ['error', '1tbs', { 'allowSingleLine': true }],
    'comma-dangle': ['error', { 'functions': 'never' }],
    'comma-spacing': ['error', { 'before': false, 'after': true }],
    'comma-style': ['error', 'last'],
    'computed-property-spacing': ['error', 'never', { 'enforceForClassMembers': true }],
    'constructor-super': 'error',
    'consistent-return': ['error', { 'treatUndefinedAsUnspecified': true }],
    'curly': ['error', 'multi', 'consistent'],
    'default-case': 'warn',
    'eol-last': ['error', 'always'],
    'eqeqeq': ['error', 'always'],
    'guard-for-in': 'warn',
    'id-denylist': [
      'error',
      'err',
      'callback',
      'Number',
      'number',
      'String',
      'string',
      'Boolean',
      'boolean',
      'Undefined',
      'undefined'],
    'indent': ['error',
      2,
      {
        'ArrayExpression': 1,
        'CallExpression': { 'arguments': 1 },
        'MemberExpression': 1,
        'ObjectExpression': 1,
        'SwitchCase': 1,
        'VariableDeclarator': 2
      }],
    'keyword-spacing': ['error', { 'before': true }],
    'max-len': [
      'error',
      {
        'code': 150,
        'ignoreComments': true,
        'ignoreUrls': true,
        'ignoreStrings': true,
        'ignoreRegExpLiterals': true
      }
    ],
    'object-curly-spacing': ['error', 'always', { 'arraysInObjects': false }],
    'no-bitwise': 'error',
    'no-caller': 'error',
    'no-debugger': 'error',
    'no-empty': 'error',
    'no-empty-function': 'error',
    'no-extra-semi': 'error',
    'no-eval': 'error',
    'no-fallthrough': 'error',
    'no-multiple-empty-lines': 'error',
    'no-throw-literal': 'error',
    'no-trailing-spaces': 'error',
    'no-undef-init': 'error',
    'no-underscore-dangle': [
      'error',
      {
        'allowAfterThis': true,
        'allowAfterSuper': true,
        'allowAfterThisConstructor': true
      }
    ],
    'no-unused-expressions': 'error',
    'no-unused-labels': 'error',
    'no-var': 'error',
    'prefer-const': 'error',
    'quotes': ['error', 'single', { 'allowTemplateLiterals': true }],
    'radix': 'error',
    'sonarjs/no-collapsible-if': 'error',
    'spaced-comment': [
      'error',
      'always',
      {
        'markers': ['/']
      }
    ],
    'sonarjs/cognitive-complexity': 'off'
  },
  'overrides': [
    {
      // enable the rule specifically for TypeScript files
      'files': ['*.ts'],
      'rules': {
        '@typescript-eslint/explicit-member-accessibility': 'error'
      }
    }
  ]
};
